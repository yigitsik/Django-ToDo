[{"/app/frontend/src/index.js":"1","/app/frontend/src/store.js":"2","/app/frontend/src/reportWebVitals.js":"3","/app/frontend/src/App.js":"4","/app/frontend/src/reducers/userReducers.js":"5","/app/frontend/src/screens/LoginScreen.js":"6","/app/frontend/src/screens/HomeScreen.js":"7","/app/frontend/src/screens/RegisterScreen.js":"8","/app/frontend/src/screens/UserEditScreen.js":"9","/app/frontend/src/screens/UserListScreen.js":"10","/app/frontend/src/components/Footer.js":"11","/app/frontend/src/reducers/taskReducers.js":"12","/app/frontend/src/components/Header.js":"13","/app/frontend/src/components/Message.js":"14","/app/frontend/src/components/Taskbox.js":"15","/app/frontend/src/components/FormContainer.js":"16","/app/frontend/src/components/Loader.js":"17","/app/frontend/src/components/Tasklist.js":"18","/app/frontend/src/constants/userConstants.js":"19","/app/frontend/src/actions/userActions.js":"20","/app/frontend/src/actions/taskActions.js":"21","/app/frontend/src/constants/taskConstants.js":"22"},{"size":595,"mtime":1674582826362,"results":"23","hashOfConfig":"24"},{"size":1131,"mtime":1674683986074,"results":"25","hashOfConfig":"24"},{"size":362,"mtime":1616789579000,"results":"26","hashOfConfig":"24"},{"size":975,"mtime":1675264992508,"results":"27","hashOfConfig":"24"},{"size":3927,"mtime":1674510467055,"results":"28","hashOfConfig":"24"},{"size":2549,"mtime":1616789579000,"results":"29","hashOfConfig":"24"},{"size":567,"mtime":1674415342161,"results":"30","hashOfConfig":"24"},{"size":3922,"mtime":1616789579000,"results":"31","hashOfConfig":"24"},{"size":3912,"mtime":1616789579000,"results":"32","hashOfConfig":"24"},{"size":3511,"mtime":1616789579000,"results":"33","hashOfConfig":"24"},{"size":357,"mtime":1674386262693,"results":"34","hashOfConfig":"24"},{"size":1710,"mtime":1675288536845,"results":"35","hashOfConfig":"24"},{"size":2237,"mtime":1675288646604,"results":"36","hashOfConfig":"24"},{"size":228,"mtime":1616789579000,"results":"37","hashOfConfig":"24"},{"size":3439,"mtime":1675284904422,"results":"38","hashOfConfig":"24"},{"size":378,"mtime":1616789579000,"results":"39","hashOfConfig":"24"},{"size":458,"mtime":1616789579000,"results":"40","hashOfConfig":"24"},{"size":5552,"mtime":1675288916862,"results":"41","hashOfConfig":"24"},{"size":1479,"mtime":1616789579000,"results":"42","hashOfConfig":"24"},{"size":7260,"mtime":1674394971400,"results":"43","hashOfConfig":"24"},{"size":3992,"mtime":1675288580124,"results":"44","hashOfConfig":"24"},{"size":720,"mtime":1675288422764,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"4rm2ck",{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/app/frontend/src/index.js",[],"/app/frontend/src/store.js",[],"/app/frontend/src/reportWebVitals.js",[],"/app/frontend/src/App.js",[],"/app/frontend/src/reducers/userReducers.js",[],"/app/frontend/src/screens/LoginScreen.js",[],"/app/frontend/src/screens/HomeScreen.js",["100","101","102","103","104","105","106","107"],"import React, { useState, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Row, Col } from 'react-bootstrap'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport TaskBox from '../components/Taskbox'\nimport TaskList from '../components/Tasklist'\n\n\nfunction HomeScreen({ history }) {\n    \n\n    return (\n        <div>\n        \n        <div className=\"row align-items-md-stretch\">\n           <TaskBox/>\n           <TaskList/>\n        </div>\n        </div>\n    )\n}\n\nexport default HomeScreen\n","/app/frontend/src/screens/RegisterScreen.js",["108"],"import React, { useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Form, Button, Row, Col } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport FormContainer from '../components/FormContainer'\nimport { register } from '../actions/userActions'\n\nfunction RegisterScreen({ location, history }) {\n\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [confirmPassword, setConfirmPassword] = useState('')\n    const [message, setMessage] = useState('')\n\n    const dispatch = useDispatch()\n\n    const redirect = location.search ? location.search.split('=')[1] : '/'\n\n    const userRegister = useSelector(state => state.userRegister)\n    const { error, loading, userInfo } = userRegister\n\n    useEffect(() => {\n        if (userInfo) {\n            history.push(redirect)\n        }\n    }, [history, userInfo, redirect])\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n\n        if (password != confirmPassword) {\n            setMessage('Passwords do not match')\n        } else {\n            dispatch(register(name, email, password))\n        }\n\n    }\n\n    return (\n        <FormContainer>\n            <h1>Sign In</h1>\n            {message && <Message variant='danger'>{message}</Message>}\n            {error && <Message variant='danger'>{error}</Message>}\n            {loading && <Loader />}\n            <Form onSubmit={submitHandler}>\n\n                <Form.Group controlId='name'>\n                    <Form.Label>Name</Form.Label>\n                    <Form.Control\n                        required\n                        type='name'\n                        placeholder='Enter name'\n                        value={name}\n                        onChange={(e) => setName(e.target.value)}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId='email'>\n                    <Form.Label>Email Address</Form.Label>\n                    <Form.Control\n                        required\n                        type='email'\n                        placeholder='Enter Email'\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId='password'>\n                    <Form.Label>Password</Form.Label>\n                    <Form.Control\n                        required\n                        type='password'\n                        placeholder='Enter Password'\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId='passwordConfirm'>\n                    <Form.Label>Confirm Password</Form.Label>\n                    <Form.Control\n                        required\n                        type='password'\n                        placeholder='Confirm Password'\n                        value={confirmPassword}\n                        onChange={(e) => setConfirmPassword(e.target.value)}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n                <Button type='submit' variant='primary'>\n                    Register\n                </Button>\n\n            </Form>\n\n            <Row className='py-3'>\n                <Col>\n                    Have an Account? <Link\n                        to={redirect ? `/login?redirect=${redirect}` : '/login'}>\n                        Sign In\n                        </Link>\n                </Col>\n            </Row>\n        </FormContainer >\n    )\n}\n\nexport default RegisterScreen\n","/app/frontend/src/screens/UserEditScreen.js",["109"],"import React, { useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Form, Button } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport FormContainer from '../components/FormContainer'\nimport { getUserDetails, updateUser } from '../actions/userActions'\nimport { USER_UPDATE_RESET } from '../constants/userConstants'\n\nfunction UserEditScreen({ match, history }) {\n\n    const userId = match.params.id\n\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [isAdmin, setIsAdmin] = useState(false)\n\n    const dispatch = useDispatch()\n\n    const userDetails = useSelector(state => state.userDetails)\n    const { error, loading, user } = userDetails\n\n    const userUpdate = useSelector(state => state.userUpdate)\n    const { error: errorUpdate, loading: loadingUpdate, success: successUpdate } = userUpdate\n\n    useEffect(() => {\n\n        if (successUpdate) {\n            dispatch({ type: USER_UPDATE_RESET })\n            history.push('/admin/userlist')\n        } else {\n\n            if (!user.name || user._id !== Number(userId)) {\n                dispatch(getUserDetails(userId))\n            } else {\n                setName(user.name)\n                setEmail(user.email)\n                setIsAdmin(user.isAdmin)\n            }\n        }\n\n    }, [user, userId, successUpdate, history])\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        dispatch(updateUser({ _id: user._id, name, email, isAdmin }))\n    }\n\n    return (\n        <div>\n            <Link to='/admin/userlist'>\n                Go Back\n            </Link>\n\n            <FormContainer>\n                <h1>Edit User</h1>\n                {loadingUpdate && <Loader />}\n                {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\n\n                {loading ? <Loader /> : error ? <Message variant='danger'>{error}</Message>\n                    : (\n                        <Form onSubmit={submitHandler}>\n\n                            <Form.Group controlId='name'>\n                                <Form.Label>Name</Form.Label>\n                                <Form.Control\n\n                                    type='name'\n                                    placeholder='Enter name'\n                                    value={name}\n                                    onChange={(e) => setName(e.target.value)}\n                                >\n                                </Form.Control>\n                            </Form.Group>\n\n                            <Form.Group controlId='email'>\n                                <Form.Label>Email Address</Form.Label>\n                                <Form.Control\n                                    type='email'\n                                    placeholder='Enter Email'\n                                    value={email}\n                                    onChange={(e) => setEmail(e.target.value)}\n                                >\n                                </Form.Control>\n                            </Form.Group>\n\n                            <Form.Group controlId='isadmin'>\n                                <Form.Check\n                                    type='checkbox'\n                                    label='Is Admin'\n                                    checked={isAdmin}\n                                    onChange={(e) => setIsAdmin(e.target.checked)}\n                                >\n                                </Form.Check>\n                            </Form.Group>\n\n                            <Button type='submit' variant='primary'>\n                                Update\n                        </Button>\n\n                        </Form>\n                    )}\n\n            </FormContainer >\n        </div>\n\n    )\n}\n\nexport default UserEditScreen","/app/frontend/src/screens/UserListScreen.js",["110"],"import React, { useState, useEffect } from 'react'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { Table, Button } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport { listUsers, deleteUser } from '../actions/userActions'\n\nfunction UserListScreen({ history }) {\n\n    const dispatch = useDispatch()\n\n    const userList = useSelector(state => state.userList)\n    const { loading, error, users } = userList\n\n    const userLogin = useSelector(state => state.userLogin)\n    const { userInfo } = userLogin\n\n    const userDelete = useSelector(state => state.userDelete)\n    const { success: successDelete } = userDelete\n\n\n    useEffect(() => {\n        if (userInfo && userInfo.isAdmin) {\n            dispatch(listUsers())\n        } else {\n            history.push('/login')\n        }\n\n    }, [dispatch, history, successDelete, userInfo])\n\n\n    const deleteHandler = (id) => {\n\n        if (window.confirm('Are you sure you want to delete this user?')) {\n            dispatch(deleteUser(id))\n        }\n    }\n\n    return (\n        <div>\n            <h1>Users</h1>\n            {loading\n                ? (<Loader />)\n                : error\n                    ? (<Message variant='danger'>{error}</Message>)\n                    : (\n                        <Table striped bordered hover responsive className='table-sm'>\n                            <thead>\n                                <tr>\n                                    <th>ID</th>\n                                    <th>NAME</th>\n                                    <th>EMAIL</th>\n                                    <th>ADMIN</th>\n                                    <th></th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                {users.map(user => (\n                                    <tr key={user._id}>\n                                        <td>{user._id}</td>\n                                        <td>{user.name}</td>\n                                        <td>{user.email}</td>\n                                        <td>{user.isAdmin ? (\n                                            <i className='fas fa-check' style={{ color: 'green' }}></i>\n                                        ) : (\n                                                <i className='fas fa-check' style={{ color: 'red' }}></i>\n                                            )}</td>\n\n                                        <td>\n                                            <LinkContainer to={`/admin/user/${user._id}/edit`}>\n                                                <Button variant='light' className='btn-sm'>\n                                                    <i className='fas fa-edit'></i>\n                                                </Button>\n                                            </LinkContainer>\n\n                                            <Button variant='danger' className='btn-sm' onClick={() => deleteHandler(user._id)}>\n                                                <i className='fas fa-trash'></i>\n                                            </Button>\n                                        </td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </Table>\n                    )}\n        </div>\n    )\n}\n\nexport default UserListScreen\n","/app/frontend/src/components/Footer.js",[],"/app/frontend/src/reducers/taskReducers.js",["111"],"import {\r\n   \r\n    TASK_CREATE_FAIL,\r\n    TASK_CREATE_REQUEST,\r\n    TASK_CREATE_SUCCESS,\r\n    TASK_LIST_REQUEST,\r\n    TASK_LIST_SUCCESS,\r\n    TASK_LIST_FAIL,\r\n    TASK_LIST_RESET,    \r\n    TASK_DELETE_REQUEST,\r\n    TASK_DELETE_SUCCESS,\r\n    TASK_DELETE_FAIL,\r\n    TASK_UPDATE_REQUEST,\r\n    TASK_UPDATE_SUCCESS\r\n\r\n} from '../constants/taskConstants'\r\n\r\n\r\nexport const taskListReducer = (state = {}, action) => {\r\n\r\n    switch (action.type) {\r\n        case TASK_LIST_REQUEST:\r\n            return { loading: true, tasks: [] }\r\n\r\n        case TASK_LIST_SUCCESS:\r\n            return{ loading: false, tasks: action.payload}\r\n\r\n        case TASK_LIST_FAIL:\r\n            return { loading: false, error: action.payload }\r\n\r\n        case TASK_LIST_RESET:\r\n            return { loading: false, error: action.payload }\r\n\r\n        case TASK_CREATE_REQUEST:\r\n            return { loading: true, tasks: [] }\r\n\r\n        case TASK_CREATE_SUCCESS:\r\n\r\n            return { loading: false, tasks: action.payload}\r\n\r\n        case TASK_CREATE_FAIL:\r\n            return { loading: false, error: action.payload }\r\n\r\n\r\n        case TASK_DELETE_REQUEST:\r\n            return { loading: true, tasks: [] }\r\n\r\n        case TASK_DELETE_SUCCESS:\r\n\r\n            return { loading: false, tasks: action.payload }\r\n\r\n        case TASK_DELETE_FAIL:\r\n            return { loading: false, error: action.payload }\r\n\r\n\r\n        case TASK_UPDATE_REQUEST:\r\n            return { loading: true }\r\n\r\n        case TASK_UPDATE_SUCCESS:\r\n            return { state, loading: false, tasks: action.payload }\r\n\r\n        case TASK_DELETE_FAIL:\r\n            return { loading: false, error: action.payload }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","/app/frontend/src/components/Header.js",["112"],"import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Navbar, Nav, Container, Row, NavDropdown } from 'react-bootstrap'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { logout } from '../actions/userActions'\nimport { resetTasks } from '../actions/taskActions'\n\n\nfunction Header() {\n\n    const userLogin = useSelector(state => state.userLogin)\n    const { userInfo } = userLogin\n\n    const dispatch = useDispatch()\n\n    const logoutHandler = () => {\n        dispatch(logout())\n        dispatch(resetTasks())\n    }\n\n    return (\n        <header>\n            <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" collapseOnSelect>\n                <Container>\n                    <LinkContainer to='/'>\n                        <Navbar.Brand>TO-DO</Navbar.Brand>\n                    </LinkContainer>\n\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\n                        <Nav className=\"ml-auto\">\n\n                    \n                            {userInfo ? (\n                                <NavDropdown title={userInfo.name} id='username'>\n                                 \n                                    <NavDropdown.Item onClick={logoutHandler}>Logout</NavDropdown.Item>\n\n                                </NavDropdown>\n                            ) : (\n                                    <LinkContainer to='/login'>\n                                        <Nav.Link><i className=\"fas fa-user\"></i>Login</Nav.Link>\n                                    </LinkContainer>\n                                )}\n\n\n                            {userInfo && userInfo.isAdmin && (\n                                <NavDropdown title='Admin' id='adminmenue'>\n                                    <LinkContainer to='/admin/userlist'>\n                                        <NavDropdown.Item>Users</NavDropdown.Item>\n                                    </LinkContainer>\n\n\n                                </NavDropdown>\n                            )}\n\n\n                        </Nav>\n                    </Navbar.Collapse>\n                </Container>\n            </Navbar>\n        </header>\n    )\n}\n\nexport default Header\n","/app/frontend/src/components/Message.js",[],"/app/frontend/src/components/Taskbox.js",["113","114","115","116","117","118"],"import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from 'react-redux'\nimport {createTask} from '../actions/taskActions'\nimport axios from \"axios\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\n\nconst initialState = {\n\ttitle: \"\",\n\tpriority: '1',\n\tstatus: '0',\n\tdeadline:''\n};\n\nconst TaskBox = () => {\n\n \tconst [data, setData] = useState(initialState);\n\tconst userLogin = useSelector(state => state.userLogin);\n\tconst { error, loading, userInfo } = userLogin;\n\tconst dispatch = useDispatch()\n\tconst [deadline, setDeadline] = useState(new Date());\n\n\n\n\tconst handleInputChange = (e) => {\n\t\tsetData({\n\t\t\t...data,\n\t\t\t[e.target.name]: e.target.value,\n\t\t});\n\t};\n\n\n\n\n\tconst addTaskHandler = (e) => {\n\t\te.preventDefault();\n\n\t\tif (!userInfo) {\n\t\t\talert(\"Please Login First!\");\n\t\t\treturn;\n\t\t}\n\n\t\tif (!data[\"title\"] || !data[\"deadline\"]) {\n\t\t\talert(\"Please Enter Full Data\");\n\t\t\treturn;\n\t\t}\n\n\t\tconst pdata = {}\n\t\tpdata[\"title\"] = data[\"title\"]\n\t\tpdata[\"status\"] = data[\"status\"]\n\t\tpdata[\"priority\"] = data[\"priority\"]\n\t\tpdata[\"deadline\"] = data[\"deadline\"]\n\t\tpdata[\"user\"] = userInfo.id\n\n\t\tdispatch(createTask(pdata))\n\n\t\tconsole.log(pdata);\n\t};\n\n\treturn (\n\t\t<div className=\"col-md-4\">\n\t\t\t<div className=\"h-100 p-5 text-white bg-dark rounded-3\">\n\t\t\t\t<h2>Add Task</h2>\n\t\t\t\t<br />\n\t\t\t\t<form>\n\t\t\t\t\t<div className=\"row mb-3\">\n\t\t\t\t\t\t<label htmlFor=\"inputTask\" className=\"col-sm-3 col-form-label\">\n\t\t\t\t\t\t\tTitle\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<div className=\"col-sm-10\">\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\t\t\tid=\"inputTask\"\n\t\t\t\t\t\t\t\tname=\"title\"\n\t\t\t\t\t\t\t\tvalue={data.title}\n\t\t\t\t\t\t\t\tonChange={(e) => handleInputChange(e)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"row mb-3\">\n\t\t\t\t\t\t<label htmlFor=\"priority\" className=\"col-sm-3 col-form-label\">\n\t\t\t\t\t\t\tPriority\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<div className=\"col-sm-10\">\n\t\t\t\t\t\t\t<select\n\t\t\t\t\t\t\t\tid=\"priority\"\n\t\t\t\t\t\t\t\tclassName=\"form-select\"\n\t\t\t\t\t\t\t\tname=\"priority\"\n\t\t\t\t\t\t\t\tonChange={(e) => handleInputChange(e)}\n\t\t\t\t\t\t\t\tvalue={data.priority}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<option value=\"1\">One</option>\n\t\t\t\t\t\t\t\t<option value=\"2\">Two</option>\n\t\t\t\t\t\t\t\t<option value=\"3\">Three</option>\n\t\t\t\t\t\t\t\t<option value=\"4\">Four</option>\n\t\t\t\t\t\t\t\t<option value=\"5\">Five</option>\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"row mb-3\">\n\t\t\t\t\t\t<label htmlFor=\"inputTask\" className=\"col-sm-3 col-form-label\">\n\t\t\t\t\t\t\tDeadline\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<div className=\"col-sm-10\">\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"date\"\n\t\t\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\t\t\tid=\"deadline\"\n\t\t\t\t\t\t\t\tname=\"deadline\"\n\t\t\t\t\t\t\t\tvalue={data.deadline}\n\t\t\t\t\t\t\t\tonChange={(e) => handleInputChange(e)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"row mb-3\">\n\t\t\t\t\t\t<label htmlFor=\"status\" className=\"col-sm-3 col-form-label\">\n\t\t\t\t\t\t\tStatus\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<div className=\"col-sm-10\">\n\t\t\t\t\t\t\t<select\n\t\t\t\t\t\t\t\tid=\"status\"\n\t\t\t\t\t\t\t\tclassName=\"form-select\"\n\t\t\t\t\t\t\t\tname=\"status\"\n\t\t\t\t\t\t\t\taria-label=\"Default select example\"\n\t\t\t\t\t\t\t\tvalue={data.status}\n\t\t\t\t\t\t\t\tonChange={(e) => handleInputChange(e)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<option value=\"0\">Pending</option>\n\t\t\t\t\t\t\t\t<option value=\"1\">Completed</option>\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<button\n\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\tclassName=\"btn btn-primary button\"\n\t\t\t\t\t\tonClick={(e) => addTaskHandler(e)}\n\t\t\t\t\t>\n\t\t\t\t\t\tAdd Task\n\t\t\t\t\t</button>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default TaskBox;\n","/app/frontend/src/components/FormContainer.js",[],"/app/frontend/src/components/Loader.js",[],"/app/frontend/src/components/Tasklist.js",["119","120","121","122"],"import { useDispatch, useSelector } from 'react-redux'\nimport React, { useState, useEffect } from 'react'\nimport {deleteTask, listTasks, updateTask} from '../actions/taskActions'\nimport { Modal } from \"react-bootstrap\";\n\n//import \"../Style/style.css\";\nimport axios from \"axios\";\n\nconst TaskList = (history) => {\n\n\tconst dispatch = useDispatch()\n\tconst userLogin = useSelector(state => state.userLogin);\n\tconst taskList = useSelector(state => state.taskList);\n\tconst { error, loading, userInfo } = userLogin;\n\n\tconst [isModalActive, setIsModalActive] = useState(false);\n\tconst [selectedItem, setSelectedItem] = useState(0)\n\n\n\tconst initialState = {\n\t\ttitle: \"\",\n\t\tpriority: '1',\n\t\tstatus: '0',\n\t\tdeadline:''\n\t};\n\n\n\n\tconst [data, setData] = useState(initialState);\n\n\n\tconst handleInputChange = (e) => {\n\t\tsetData({\n\t\t\t...data,\n\t\t\t[e.target.name]: e.target.value,\n\n\t\t});\n\n\t};\n\n\n\tuseEffect(() => {\n\t console.log(data);\n\t console.log(typeof(data.deadline))\n\t}, [data])\n\n\n\tuseEffect(() => {\n\n\t\tif (userInfo) {\n\n\t\t\tdispatch(listTasks())\n        }\n\n\n\t}, [dispatch, userInfo]);\n\n\n\tconst updateButtonHandler = (id) => {\n\t\tsetSelectedItem(id)\n\t\tsetIsModalActive(!isModalActive)\n\n\t\tif(id){\n\t\t\tsetData(taskList.tasks.find(e => e.id == id))\n\t\t}\n\t\n\t}\n\n\n\n\n\n\tconst updateHandler = (e,id) => {\n\t\te.preventDefault();\n\t\tdispatch(updateTask(selectedItem, data))\n\t\tupdateButtonHandler()\n\n\t}\n\n\tconst deleteHandler = (e, id) => {\n\t\te.preventDefault();\n\n\t\tdispatch(deleteTask(id))\n\n\t}\n\n\treturn (\n\t\t<div className=\"col-md-8\">\n<Modal show={isModalActive} onHide={updateButtonHandler} animation={false}>\n\t\t\t<Modal.Header closeButton>\n\t\t\t\t<Modal.Title>Update Task</Modal.Title>\n\t\t\t</Modal.Header>\n\t\t\t<Modal.Body>\n\t\t\t\t<form>\n\t\t\t\t\t<div className=\"row mb-3\">\n\t\t\t\t\t\t<label htmlFor=\"inputTask\" className=\"col-sm-3 col-form-label\">\n\t\t\t\t\t\t\tTitle\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<div className=\"col-sm-10\">\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\t\t\tid=\"inputTask\"\n\t\t\t\t\t\t\t\tname=\"title\"\n\t\t\t\t\t\t\t\tvalue={data.title}\n\t\t\t\t\t\t\t\tonChange={handleInputChange}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"row mb-3\">\n\t\t\t\t\t\t<label htmlFor=\"priority\" className=\"col-sm-3 col-form-label\">\n\t\t\t\t\t\t\tPriority\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<div className=\"col-sm-10\">\n\t\t\t\t\t\t\t<select\n\t\t\t\t\t\t\t\tid=\"priority\"\n\t\t\t\t\t\t\t\tclassName=\"form-select\"\n\t\t\t\t\t\t\t\tname=\"priority\"\n\t\t\t\t\t\t\t\tvalue={data.priority}\n\n\t\t\t\t\t\t\t\tonChange={handleInputChange}>\n\t\t\t\t\t\t\t\t<option value=\"1\">One</option>\n\t\t\t\t\t\t\t\t<option value=\"2\">Two</option>\n\t\t\t\t\t\t\t\t<option value=\"3\">Three</option>\n\t\t\t\t\t\t\t\t<option value=\"4\">Four</option>\n\t\t\t\t\t\t\t\t<option value=\"5\">Five</option>\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"row mb-3\">\n\t\t\t\t\t\t<label htmlFor=\"status\" className=\"col-sm-3 col-form-label\">\n\t\t\t\t\t\t\tStatus\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<div className=\"col-sm-10\">\n\t\t\t\t\t\t\t<select\n\t\t\t\t\t\t\t\tid=\"status\"\n\t\t\t\t\t\t\t\tclassName=\"form-select\"\n\t\t\t\t\t\t\t\tname=\"status\"\n\t\t\t\t\t\t\t\tvalue={data.status}\n\t\t\t\t\t\t\t\tonChange={handleInputChange}\n\t\t\t\t\t\t\t\taria-label=\"Default select example\">\n\t\t\t\t\t\t\t\t<option value=\"0\">Pending</option>\n\t\t\t\t\t\t\t\t<option value=\"1\">Completed</option>\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"row mb-3\">\n\t\t\t\t\t\t<label htmlFor=\"inputTask\" className=\"col-sm-3 col-form-label\">\n\t\t\t\t\t\t\tDeadline\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<div className=\"col-sm-10\">\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"date\"\n\t\t\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\t\t\tid=\"deadline\"\n\t\t\t\t\t\t\t\tname=\"deadline\"\n\t\t\t\t\t\t\t\tvalue={data.deadline.split('T')[0]}\n\t\t\t\t\t\t\t\tonChange={handleInputChange}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<button\n\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\tclassName=\"btn btn-primary\"\n\t\t\t\t\t\tonClick={(e) => updateHandler(e,document.getElementById(\"taskIdField\"))}\n\t\t\t\t\t>\n\t\t\t\t\t\tSave Changes\n\t\t\t\t\t</button>\n\t\t\t\t</form>\n\t\t\t</Modal.Body>\n\t\t</Modal>\n\n\n\n\t\t\t<div className=\"h-100 p-4 bg-light border rounded-3\">\n\t\t\t\t<h2 className=\"text-center\">Task List</h2> <br />\n\t\t\t\t{userInfo ?\n\t\t\t\t\t(taskList.loading ? <span className=\"loader\">LOADING...</span> :\n\t\t\t\t\t\t(taskList.tasks ?\n\t\t\t\t\t\t\t(<>\n\t\t\t\t\t\t\t\t<div className=\"table-responsive table-fixed\">\n\t\t\t\t\t\t\t\t\t<table className=\"table table-striped\">\n\t\t\t\t\t\t\t\t\t\t<thead className=\"thead-dark\">\n\t\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t<th scope=\"col\">#</th>\n\t\t\t\t\t\t\t\t\t\t\t\t<th scope=\"col\">Title</th>\n\t\t\t\t\t\t\t\t\t\t\t\t<th scope=\"col\">Priority</th>\n\t\t\t\t\t\t\t\t\t\t\t\t<th scope=\"col\">Status</th>\n\t\t\t\t\t\t\t\t\t\t\t\t<th scope=\"col\">Deadline</th>\n\t\t\t\t\t\t\t\t\t\t\t\t<th scope=\"col\">Action</th>\n\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t\t\t\t{taskList.tasks.length > 0 &&\n\t\t\t\t\t\t\t\t\t\t\t\ttaskList.tasks.map((task) => (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<tr key={task.id}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<th id=\"taskIdField\" scope=\"row\">{task.id}</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{task.title}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{task.priority}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{task.status === \"0\" ? \"Pending\" : \"Completed\"}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{task.deadline.split('T')[0]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"btn btn-warning\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => updateButtonHandler(task.id)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tUpdate\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</button> {\" \"}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"btn btn-danger\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={(e) => deleteHandler(e, task.id)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tDelete\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t</tr>)\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t\t\t\t</table>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</>):<span className=\"error\">There is no task yet</span>\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t\t:\n\t\t\t\t\t(\n\t\t\t\t\t\t<h1 className=\"text-center\">Please Login</h1>\n\t\t\t\t\t)}\n\t\t\t</div>\n\t\t</div >\n\t);\n};\n\nexport default TaskList;\n\n","/app/frontend/src/constants/userConstants.js",[],"/app/frontend/src/actions/userActions.js",["123"],"import axios from 'axios'\nimport {\n    USER_LOGIN_REQUEST,\n    USER_LOGIN_SUCCESS,\n    USER_LOGIN_FAIL,\n\n    USER_LOGOUT,\n\n    USER_REGISTER_REQUEST,\n    USER_REGISTER_SUCCESS,\n    USER_REGISTER_FAIL,\n\n    USER_DETAILS_REQUEST,\n    USER_DETAILS_SUCCESS,\n    USER_DETAILS_FAIL,\n    USER_DETAILS_RESET,\n\n    USER_UPDATE_PROFILE_REQUEST,\n    USER_UPDATE_PROFILE_SUCCESS,\n    USER_UPDATE_PROFILE_FAIL,\n    USER_UPDATE_PROFILE_RESET,\n\n    USER_LIST_REQUEST,\n    USER_LIST_SUCCESS,\n    USER_LIST_FAIL,\n    USER_LIST_RESET,\n\n    USER_DELETE_REQUEST,\n    USER_DELETE_SUCCESS,\n    USER_DELETE_FAIL,\n\n    USER_UPDATE_REQUEST,\n    USER_UPDATE_SUCCESS,\n    USER_UPDATE_FAIL,\n\n} from '../constants/userConstants'\n\n\nexport const login = (email, password) => async (dispatch) => {\n    try {\n        dispatch({\n            type: USER_LOGIN_REQUEST\n        })\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json'\n            }\n        }\n\n        const { data } = await axios.post(\n            '/api/users/login/',\n            { 'username': email, 'password': password },\n            config\n        )\n\n        dispatch({\n            type: USER_LOGIN_SUCCESS,\n            payload: data\n        })\n\n        localStorage.setItem('userInfo', JSON.stringify(data))\n\n    } catch (error) {\n        dispatch({\n            type: USER_LOGIN_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\nexport const logout = () => (dispatch) => {\n    localStorage.removeItem('userInfo')\n    dispatch({ type: USER_LOGOUT })\n    dispatch({ type: USER_DETAILS_RESET })\n    dispatch({ type: USER_LIST_RESET })\n}\n\n\nexport const register = (name, email, password) => async (dispatch) => {\n    try {\n        dispatch({\n            type: USER_REGISTER_REQUEST\n        })\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json'\n            }\n        }\n\n        const { data } = await axios.post(\n            '/api/users/register/',\n            { 'name': name, 'email': email, 'password': password },\n            config\n        )\n\n        dispatch({\n            type: USER_REGISTER_SUCCESS,\n            payload: data\n        })\n\n        dispatch({\n            type: USER_LOGIN_SUCCESS,\n            payload: data\n        })\n\n        localStorage.setItem('userInfo', JSON.stringify(data))\n\n    } catch (error) {\n        dispatch({\n            type: USER_REGISTER_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\nexport const getUserDetails = (id) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: USER_DETAILS_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.get(\n            `/api/users/${id}/`,\n            config\n        )\n\n        dispatch({\n            type: USER_DETAILS_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: USER_DETAILS_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: USER_UPDATE_PROFILE_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.put(\n            `/api/users/profile/update/`,\n            user,\n            config\n        )\n\n        dispatch({\n            type: USER_UPDATE_PROFILE_SUCCESS,\n            payload: data\n        })\n\n        dispatch({\n            type: USER_LOGIN_SUCCESS,\n            payload: data\n        })\n\n        localStorage.setItem('userInfo', JSON.stringify(data))\n\n    } catch (error) {\n        dispatch({\n            type: USER_UPDATE_PROFILE_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\nexport const listUsers = () => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: USER_LIST_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.get(\n            `/api/users/`,\n            config\n        )\n\n        dispatch({\n            type: USER_LIST_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: USER_LIST_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\nexport const deleteUser = (id) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: USER_DELETE_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.delete(\n            `/api/users/delete/${id}/`,\n            config\n        )\n\n        dispatch({\n            type: USER_DELETE_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: USER_DELETE_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\nexport const updateUser = (user) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: USER_UPDATE_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.put(\n            `/api/users/update/${user._id}/`,\n            user,\n            config\n        )\n\n        dispatch({\n            type: USER_UPDATE_SUCCESS,\n        })\n\n        dispatch({\n            type: USER_DETAILS_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: USER_UPDATE_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}","/app/frontend/src/actions/taskActions.js",["124","125"],"import {\r\n\r\n    TASK_LIST_REQUEST,\r\n    TASK_LIST_SUCCESS,\r\n    TASK_LIST_FAIL,\r\n    TASK_LIST_RESET,\r\n   \r\n    TASK_CREATE_REQUEST,\r\n    TASK_CREATE_FAIL,\r\n    TASK_CREATE_SUCCESS,\r\n    TASK_DELETE_REQUEST,\r\n    TASK_DELETE_SUCCESS,\r\n    TASK_DELETE_FAIL,\r\n    TASK_UPDATE_REQUEST,\r\n    TASK_UPDATE_SUCCESS,\r\n    TASK_UPDATE_FAIL,\r\n\r\n\r\n} from '../constants/taskConstants'\r\nimport axios from 'axios'\r\n\r\n\r\nexport const listTasks = () => async (dispatch, getState) => {\r\n\r\n\r\n    try {\r\n        dispatch({\r\n            type: TASK_LIST_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(\r\n         `/api/tasks/`,\r\n            config\r\n        )\r\n\r\n    \r\n\r\n        dispatch({\r\n            type: TASK_LIST_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: TASK_LIST_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const resetTasks = () => async (dispatch,getState) => {\r\n    dispatch({\r\n        type: TASK_LIST_RESET,\r\n        payload: {}\r\n    })\r\n}\r\n\r\nexport const createTask = (taskData) => async (dispatch, getState) => {\r\n\r\n    const {\r\n        userLogin: { userInfo },\r\n        taskList:{tasks},\r\n    } = getState()\r\n\r\n    dispatch({\r\n        type: TASK_CREATE_REQUEST\r\n    })\r\n    \r\n    axios\r\n    .post(\"/api/tasks/create\", JSON.stringify(taskData), {\r\n        headers: {\r\n            'Content-type': 'application/json',\r\n            Authorization: `Bearer ${userInfo.token}`\r\n        }\r\n    })\r\n    .then((res) => {\r\n\r\n        dispatch({\r\n            type: TASK_CREATE_SUCCESS,\r\n            payload: tasks.concat(res.data)\r\n        })\r\n    })\r\n    .catch((err) => {\r\n\r\n        dispatch({\r\n            type: TASK_CREATE_FAIL,\r\n            payload: err[\"response\"] ? err.response.data : \"Network Error\"\r\n        })\r\n    });\r\n\r\n}\r\n\r\n\r\n\r\nexport const deleteTask = (id) => async (dispatch,getState) => {\r\n\r\n    const {\r\n        userLogin: { userInfo },\r\n    } = getState()\r\n\r\n    dispatch({\r\n        type: TASK_DELETE_REQUEST\r\n    })\r\n    \r\n    \r\n    axios\r\n    .delete(`/api/tasks/delete/${id}`, {\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'authorization': `Bearer ${userInfo.token}`,\r\n        }\r\n    })\r\n    .then((res) => {\r\n\r\n        dispatch({\r\n            type: TASK_DELETE_SUCCESS,\r\n            payload: res.data\r\n        })\r\n    })\r\n    .catch((err) => {\r\n        dispatch({\r\n            type: TASK_DELETE_FAIL,\r\n            payload: err[\"response\"] ? err.response.data : \"Network Error\"\r\n        })\r\n    });\r\n    \r\n}\r\n\r\nexport const updateTask = (id,data) => async (dispatch,getState) => {\r\n\r\n    const {\r\n        userLogin: { userInfo },\r\n        taskList:{tasks},\r\n    } = getState()\r\n\r\n    dispatch({\r\n        type: TASK_UPDATE_REQUEST\r\n    })\r\n\r\n    \r\n    axios\r\n    .put(`/api/tasks/update/${id}`, data, {\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'authorization': `Bearer ${userInfo.token}`,\r\n        }\r\n    })\r\n    .then((res) => {\r\n\r\n     \r\n        console.log(tasks.findIndex(x => x.id == id));\r\n\r\n        tasks[tasks.findIndex(x => x.id == id)] = res.data\r\n\r\n        console.log(tasks);\r\n\r\n        dispatch({\r\n            type: TASK_UPDATE_SUCCESS,\r\n            payload:  tasks\r\n        })\r\n    })\r\n    .catch((err) => {\r\n\r\n        console.log(err);\r\n\r\n\r\n        dispatch({\r\n            type: TASK_UPDATE_FAIL,\r\n            payload: err[\"response\"] ? err.response.data : \"Network Error\"\r\n        })\r\n    });\r\n    \r\n}\r\n\r\n\r\n\r\n","/app/frontend/src/constants/taskConstants.js",[],{"ruleId":"126","severity":1,"message":"127","line":1,"column":17,"nodeType":"128","messageId":"129","endLine":1,"endColumn":25},{"ruleId":"126","severity":1,"message":"130","line":1,"column":27,"nodeType":"128","messageId":"129","endLine":1,"endColumn":36},{"ruleId":"126","severity":1,"message":"131","line":2,"column":10,"nodeType":"128","messageId":"129","endLine":2,"endColumn":21},{"ruleId":"126","severity":1,"message":"132","line":2,"column":23,"nodeType":"128","messageId":"129","endLine":2,"endColumn":34},{"ruleId":"126","severity":1,"message":"133","line":3,"column":10,"nodeType":"128","messageId":"129","endLine":3,"endColumn":13},{"ruleId":"126","severity":1,"message":"134","line":3,"column":15,"nodeType":"128","messageId":"129","endLine":3,"endColumn":18},{"ruleId":"126","severity":1,"message":"135","line":4,"column":8,"nodeType":"128","messageId":"129","endLine":4,"endColumn":14},{"ruleId":"126","severity":1,"message":"136","line":5,"column":8,"nodeType":"128","messageId":"129","endLine":5,"endColumn":15},{"ruleId":"137","severity":1,"message":"138","line":34,"column":22,"nodeType":"139","messageId":"140","endLine":34,"endColumn":24},{"ruleId":"141","severity":1,"message":"142","line":43,"column":8,"nodeType":"143","endLine":43,"endColumn":46,"suggestions":"144"},{"ruleId":"126","severity":1,"message":"127","line":1,"column":17,"nodeType":"128","messageId":"129","endLine":1,"endColumn":25},{"ruleId":"145","severity":1,"message":"146","line":62,"column":9,"nodeType":"147","messageId":"140","endLine":63,"endColumn":61},{"ruleId":"126","severity":1,"message":"133","line":3,"column":34,"nodeType":"128","messageId":"129","endLine":3,"endColumn":37},{"ruleId":"126","severity":1,"message":"148","line":4,"column":8,"nodeType":"128","messageId":"129","endLine":4,"endColumn":13},{"ruleId":"126","severity":1,"message":"149","line":5,"column":8,"nodeType":"128","messageId":"129","endLine":5,"endColumn":18},{"ruleId":"126","severity":1,"message":"150","line":20,"column":10,"nodeType":"128","messageId":"129","endLine":20,"endColumn":15},{"ruleId":"126","severity":1,"message":"151","line":20,"column":17,"nodeType":"128","messageId":"129","endLine":20,"endColumn":24},{"ruleId":"126","severity":1,"message":"152","line":22,"column":9,"nodeType":"128","messageId":"129","endLine":22,"endColumn":17},{"ruleId":"126","severity":1,"message":"153","line":22,"column":19,"nodeType":"128","messageId":"129","endLine":22,"endColumn":30},{"ruleId":"126","severity":1,"message":"148","line":7,"column":8,"nodeType":"128","messageId":"129","endLine":7,"endColumn":13},{"ruleId":"126","severity":1,"message":"150","line":14,"column":10,"nodeType":"128","messageId":"129","endLine":14,"endColumn":15},{"ruleId":"126","severity":1,"message":"151","line":14,"column":17,"nodeType":"128","messageId":"129","endLine":14,"endColumn":24},{"ruleId":"137","severity":1,"message":"154","line":64,"column":42,"nodeType":"139","messageId":"140","endLine":64,"endColumn":44},{"ruleId":"126","severity":1,"message":"155","line":21,"column":5,"nodeType":"128","messageId":"129","endLine":21,"endColumn":30},{"ruleId":"137","severity":1,"message":"154","line":168,"column":47,"nodeType":"139","messageId":"140","endLine":168,"endColumn":49},{"ruleId":"137","severity":1,"message":"154","line":170,"column":41,"nodeType":"139","messageId":"140","endLine":170,"endColumn":43},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useDispatch' is defined but never used.","'useSelector' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'Loader' is defined but never used.","'Message' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["156"],"no-duplicate-case","Duplicate case label.","SwitchCase","'axios' is defined but never used.","'DatePicker' is defined but never used.","'error' is assigned a value but never used.","'loading' is assigned a value but never used.","'deadline' is assigned a value but never used.","'setDeadline' is assigned a value but never used.","Expected '===' and instead saw '=='.","'USER_UPDATE_PROFILE_RESET' is defined but never used.",{"desc":"157","fix":"158"},"Update the dependencies array to be: [user, userId, successUpdate, history, dispatch]",{"range":"159","text":"160"},[1432,1470],"[user, userId, successUpdate, history, dispatch]"]